[{"/home/brl4528/MidasCorp/samasc-web/src/index.tsx":"1","/home/brl4528/MidasCorp/samasc-web/src/App.tsx":"2","/home/brl4528/MidasCorp/samasc-web/src/styles/global.ts":"3","/home/brl4528/MidasCorp/samasc-web/src/pages/SignIn/index.tsx":"4","/home/brl4528/MidasCorp/samasc-web/src/pages/SignIn/styles.ts":"5","/home/brl4528/MidasCorp/samasc-web/src/components/Input/index.tsx":"6","/home/brl4528/MidasCorp/samasc-web/src/components/Button/index.tsx":"7","/home/brl4528/MidasCorp/samasc-web/src/components/Input/styles.ts":"8","/home/brl4528/MidasCorp/samasc-web/src/components/Button/styles.ts":"9","/home/brl4528/MidasCorp/samasc-web/src/components/Tooltip/index.tsx":"10","/home/brl4528/MidasCorp/samasc-web/src/components/Tooltip/styles.ts":"11","/home/brl4528/MidasCorp/samasc-web/src/utils/getValidationErrors.ts":"12","/home/brl4528/MidasCorp/samasc-web/src/hooks/index.tsx":"13","/home/brl4528/MidasCorp/samasc-web/src/hooks/auth.tsx":"14","/home/brl4528/MidasCorp/samasc-web/src/services/api.ts":"15","/home/brl4528/MidasCorp/samasc-web/src/hooks/toast.tsx":"16","/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/index.tsx":"17","/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/styles.ts":"18","/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/Toast/index.tsx":"19","/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/Toast/styles.ts":"20","/home/brl4528/MidasCorp/samasc-web/src/routes/index.tsx":"21","/home/brl4528/MidasCorp/samasc-web/src/routes/Route.tsx":"22","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/index.tsx":"23","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-user/index.tsx":"24","/home/brl4528/MidasCorp/samasc-web/src/components/Sidebar/index.tsx":"25","/home/brl4528/MidasCorp/samasc-web/src/components/Header/index.tsx":"26","/home/brl4528/MidasCorp/samasc-web/src/components/Header/styles.ts":"27","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/styles.ts":"28","/home/brl4528/MidasCorp/samasc-web/src/pages/_Layouts/admin/index.tsx":"29","/home/brl4528/MidasCorp/samasc-web/src/components/Sidebar/styles.ts":"30","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Email/index.tsx":"31","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Email/styles.ts":"32","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Report/index.tsx":"33","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Report/styles.ts":"34","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBar/index.tsx":"35","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicLine/index.tsx":"36","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicPie/index.tsx":"37","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBar/styles.ts":"38","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBump/index.tsx":"39","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/index.tsx":"40","/home/brl4528/MidasCorp/samasc-web/src/components/TextArea/index.tsx":"41","/home/brl4528/MidasCorp/samasc-web/src/components/TextArea/styles.ts":"42","/home/brl4528/MidasCorp/samasc-web/src/components/Select/index.tsx":"43","/home/brl4528/MidasCorp/samasc-web/src/components/Select/styles.ts":"44","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/GoalsSubgoals/index.tsx":"45","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/GoalsSubgoals/styles.ts":"46","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Sector/index.tsx":"47","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Sector/styles.ts":"48","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/CardGraphic/index.tsx":"49","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/CardGraphic/styles.ts":"50","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicSpeedometer/index.tsx":"51","/home/brl4528/MidasCorp/samasc-web/src/components/DataTable/index.tsx":"52","/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicChartPie/index.tsx":"53","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/AnalyticModule/index.tsx":"54","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/AnalyticModule/styles.ts":"55","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddAnalyticModule/index.tsx":"56","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddAnalyticModule/styles.ts":"57","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddGoals/index.tsx":"58","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddGoals/styles.ts":"59","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSubGoals/index.tsx":"60","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSubGoals/styles.ts":"61","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSector/index.tsx":"62","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSector/styles.ts":"63","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/PainelAnalyticModule/index.tsx":"64","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/PainelAnalyticModule/styles.ts":"65","/home/brl4528/MidasCorp/samasc-web/src/components/InputRadio/index.tsx":"66","/home/brl4528/MidasCorp/samasc-web/src/components/InputRadio/styles.ts":"67"},{"size":479,"mtime":1609978708539,"results":"68","hashOfConfig":"69"},{"size":357,"mtime":1610221499412,"results":"70","hashOfConfig":"69"},{"size":898,"mtime":1610583428235,"results":"71","hashOfConfig":"69"},{"size":2277,"mtime":1610219794891,"results":"72","hashOfConfig":"69"},{"size":727,"mtime":1610073453378,"results":"73","hashOfConfig":"69"},{"size":1557,"mtime":1610805351049,"results":"74","hashOfConfig":"69"},{"size":370,"mtime":1610412489819,"results":"75","hashOfConfig":"69"},{"size":1109,"mtime":1612313756435,"results":"76","hashOfConfig":"69"},{"size":634,"mtime":1612313762187,"results":"77","hashOfConfig":"69"},{"size":367,"mtime":1610201376733,"results":"78","hashOfConfig":"69"},{"size":721,"mtime":1610206144666,"results":"79","hashOfConfig":"69"},{"size":350,"mtime":1610198296512,"results":"80","hashOfConfig":"69"},{"size":272,"mtime":1610219333291,"results":"81","hashOfConfig":"69"},{"size":2274,"mtime":1610220167608,"results":"82","hashOfConfig":"69"},{"size":116,"mtime":1610216425771,"results":"83","hashOfConfig":"69"},{"size":1477,"mtime":1610219151732,"results":"84","hashOfConfig":"69"},{"size":782,"mtime":1610217784444,"results":"85","hashOfConfig":"69"},{"size":162,"mtime":1610217810464,"results":"86","hashOfConfig":"69"},{"size":1205,"mtime":1610217739652,"results":"87","hashOfConfig":"69"},{"size":1181,"mtime":1610218224404,"results":"88","hashOfConfig":"69"},{"size":1440,"mtime":1612727902311,"results":"89","hashOfConfig":"69"},{"size":1885,"mtime":1610299004684,"results":"90","hashOfConfig":"69"},{"size":2309,"mtime":1612395881778,"results":"91","hashOfConfig":"69"},{"size":116,"mtime":1610222394347,"results":"92","hashOfConfig":"69"},{"size":17529,"mtime":1612236455469,"results":"93","hashOfConfig":"69"},{"size":986,"mtime":1610256593575,"results":"94","hashOfConfig":"69"},{"size":1796,"mtime":1612236763337,"results":"95","hashOfConfig":"69"},{"size":596,"mtime":1612233271711,"results":"96","hashOfConfig":"69"},{"size":464,"mtime":1610299292381,"results":"97","hashOfConfig":"69"},{"size":940,"mtime":1612628817891,"results":"98","hashOfConfig":"69"},{"size":393,"mtime":1610304416238,"results":"99","hashOfConfig":"69"},{"size":162,"mtime":1610304381523,"results":"100","hashOfConfig":"69"},{"size":397,"mtime":1610304946411,"results":"101","hashOfConfig":"69"},{"size":162,"mtime":1610304881883,"results":"102","hashOfConfig":"69"},{"size":3457,"mtime":1611504296999,"results":"103","hashOfConfig":"69"},{"size":3098,"mtime":1611511491716,"results":"104","hashOfConfig":"69"},{"size":3071,"mtime":1610671379467,"results":"105","hashOfConfig":"69"},{"size":131,"mtime":1610317410648,"results":"106","hashOfConfig":"69"},{"size":2698,"mtime":1611277611872,"results":"107","hashOfConfig":"69"},{"size":1084,"mtime":1612396069581,"results":"108","hashOfConfig":"69"},{"size":1596,"mtime":1612315321602,"results":"109","hashOfConfig":"69"},{"size":1119,"mtime":1610588893006,"results":"110","hashOfConfig":"69"},{"size":2297,"mtime":1610806205251,"results":"111","hashOfConfig":"69"},{"size":670,"mtime":1610588873642,"results":"112","hashOfConfig":"69"},{"size":5265,"mtime":1612719122388,"results":"113","hashOfConfig":"69"},{"size":4347,"mtime":1612715152894,"results":"114","hashOfConfig":"69"},{"size":3563,"mtime":1612703721789,"results":"115","hashOfConfig":"69"},{"size":5499,"mtime":1612703973885,"results":"116","hashOfConfig":"69"},{"size":1883,"mtime":1611276592976,"results":"117","hashOfConfig":"69"},{"size":1262,"mtime":1611274665589,"results":"118","hashOfConfig":"69"},{"size":1373,"mtime":1612703933740,"results":"119","hashOfConfig":"69"},{"size":1774,"mtime":1612621690884,"results":"120","hashOfConfig":"69"},{"size":546,"mtime":1611513895558,"results":"121","hashOfConfig":"69"},{"size":4095,"mtime":1612719383979,"results":"122","hashOfConfig":"69"},{"size":2397,"mtime":1612715271841,"results":"123","hashOfConfig":"69"},{"size":3039,"mtime":1612650900433,"results":"124","hashOfConfig":"69"},{"size":3062,"mtime":1612315435113,"results":"125","hashOfConfig":"69"},{"size":7850,"mtime":1612726045017,"results":"126","hashOfConfig":"69"},{"size":3316,"mtime":1612402751086,"results":"127","hashOfConfig":"69"},{"size":2328,"mtime":1612405993008,"results":"128","hashOfConfig":"69"},{"size":2844,"mtime":1612404119644,"results":"129","hashOfConfig":"69"},{"size":4696,"mtime":1612720947326,"results":"130","hashOfConfig":"69"},{"size":2584,"mtime":1612706947283,"results":"131","hashOfConfig":"69"},{"size":3397,"mtime":1612840596126,"results":"132","hashOfConfig":"69"},{"size":1397,"mtime":1612741288874,"results":"133","hashOfConfig":"69"},{"size":3475,"mtime":1612833888076,"results":"134","hashOfConfig":"69"},{"size":1109,"mtime":1612830200045,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"11su83p",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"138"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"138"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"138"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"138"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"138"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"138"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"/home/brl4528/MidasCorp/samasc-web/src/index.tsx",[],["283","284","285","286","287"],"/home/brl4528/MidasCorp/samasc-web/src/App.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/styles/global.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/SignIn/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/SignIn/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Input/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Button/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Input/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Button/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Tooltip/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Tooltip/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/utils/getValidationErrors.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/hooks/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/hooks/auth.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/services/api.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/hooks/toast.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/Toast/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/ToastContainer/Toast/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/routes/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/routes/Route.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/index.tsx",["288"],"import React, { useRef, useState, useEffect } from 'react';\nimport { Report } from 'powerbi-report-component';\nimport { useLoading, Oval } from '@agney/react-loading';\n\nimport { Conatiner, ContainerBI } from './styles';\nimport { useToast } from '../../hooks/toast';\nimport api from '../../services/api';\n\ninterface PropsPowerBI {\n  accessToken: string;\n  embedUrl: [\n    {\n      reportId: string;\n      reportName: string;\n      embedUrl: string;\n    },\n  ];\n}\n\nconst Dashboard: React.FC = () => {\n  const componentRef = useRef<HTMLDivElement>(null);\n  const { addToast } = useToast();\n\n  const [dataBI, setDataBI] = useState<PropsPowerBI>();\n  const [loadDash, setLoadDash] = useState(true);\n\n  const { containerProps, indicatorEl } = useLoading({\n    loading: loadDash,\n    indicator: <Oval />,\n  });\n\n  const layoutSettings = {\n    width: '100%',\n    height: '93vh',\n    background: '#FFF',\n    borderColor: '#FFF',\n  };\n\n  useEffect(() => {\n    async function loadTokenBI(): Promise<void> {\n      try {\n        const response = await api.get('/getEmbedToken');\n        setLoadDash(false);\n        setDataBI(response.data);\n        // console.log(response.data.embedUrl[0].reportId);\n      } catch (err) {\n        console.log(err);\n\n        addToast({\n          type: 'error',\n          title: 'Gráficos de analíse',\n          description: 'Não foi posivel carrgar os gráficos de analíse',\n        });\n      }\n    }\n    loadTokenBI();\n  }, [setLoadDash, addToast]);\n\n  return (\n    <>\n      <Conatiner {...containerProps} ref={componentRef}>\n        {indicatorEl}\n        <ContainerBI load={loadDash}>\n          {dataBI ? (\n            <Report\n              tokenType=\"Embed\"\n              accessToken={dataBI ? dataBI.accessToken : 'sem token'}\n              embedUrl={dataBI ? dataBI.embedUrl[0].embedUrl : 'sem token'}\n              embedId={dataBI ? dataBI.embedUrl[0].reportId : 'sem token'}\n              // pageName=\"Sentiment\"\n              reportMode=\"View\"\n              // datasetId={datasetId}\n              // groupId={groupId}\n              // extraSettings={extraSettings}\n              style={layoutSettings}\n              permissions=\"All\"\n            />\n          ) : (\n            ''\n          )}\n        </ContainerBI>\n      </Conatiner>\n    </>\n  );\n};\n\nexport default Dashboard;\n","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-user/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Sidebar/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Header/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Header/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/_Layouts/admin/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Sidebar/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Email/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Email/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Report/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Report/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBar/index.tsx",[],["289","290","291","292","293"],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicLine/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicPie/index.tsx",["294"],"import React from 'react';\n\nimport { ResponsivePie } from '@nivo/pie';\n\nconst data = [\n  {\n    id: 'java',\n    label: 'java',\n    value: 205,\n    color: 'hsl(71, 70%, 50%)',\n  },\n  {\n    id: 'scala',\n    label: 'scala',\n    value: 150,\n    color: 'hsl(256, 70%, 50%)',\n  },\n  {\n    id: 'css',\n    label: 'css',\n    value: 339,\n    color: 'hsl(184, 70%, 50%)',\n  },\n  {\n    id: 'sass',\n    label: 'sass',\n    value: 175,\n    color: 'hsl(125, 70%, 50%)',\n  },\n  {\n    id: 'haskell',\n    label: 'haskell',\n    value: 50,\n    color: 'hsl(26, 70%, 50%)',\n  },\n];\n\nconst GraphicPie: React.FC = () => {\n  return (\n    <ResponsivePie\n      data={data}\n      margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\n      innerRadius={0.5}\n      padAngle={0.7}\n      isInteractive\n      cornerRadius={3}\n      colors={{ scheme: 'nivo' }}\n      borderWidth={1}\n      borderColor={{ from: 'color', modifiers: [['darker', 0.2]] }}\n      radialLabelsSkipAngle={10}\n      radialLabelsTextColor=\"#333333\"\n      radialLabelsLinkColor={{ from: 'color' }}\n      sliceLabelsSkipAngle={10}\n      sliceLabelsTextColor=\"#333333\"\n      onClick={color => console.log(color)}\n      defs={[\n        {\n          id: 'dots',\n          type: 'patternDots',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: 'lines',\n          type: 'patternLines',\n          background: 'inherit',\n          color: 'rgba(255, 255, 255, 0.3)',\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: 'ruby',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'c',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'go',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'python',\n          },\n          id: 'dots',\n        },\n        {\n          match: {\n            id: 'scala',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'lisp',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'elixir',\n          },\n          id: 'lines',\n        },\n        {\n          match: {\n            id: 'javascript',\n          },\n          id: 'lines',\n        },\n      ]}\n      legends={[\n        {\n          anchor: 'bottom',\n          direction: 'row',\n          justify: false,\n          translateX: 0,\n          translateY: 56,\n          itemsSpacing: 0,\n          itemWidth: 100,\n          itemHeight: 18,\n          itemTextColor: '#999',\n          itemDirection: 'left-to-right',\n          itemOpacity: 1,\n          symbolSize: 18,\n          symbolShape: 'circle',\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemTextColor: '#000',\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  );\n};\n\nexport default GraphicPie;\n",["295","296","297","298","299"],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBar/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicBump/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/index.tsx",["300"],"import React, { useState, useEffect } from 'react';\n\nimport ReactModal from 'react-modal';\n\ninterface IModalProps {\n  children: any;\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\nconst Modal: React.FC<IModalProps> = ({ children, isOpen, setIsOpen }) => {\n  const [modalStatus, setModalStatus] = useState(isOpen);\n\n  useEffect(() => {\n    setModalStatus(isOpen);\n  }, [isOpen]);\n\n  return (\n    <ReactModal\n      shouldCloseOnOverlayClick={!false}\n      onRequestClose={setIsOpen}\n      isOpen={modalStatus}\n      ariaHideApp={false}\n      style={{\n        content: {\n          top: '45%',\n          left: '50%',\n          right: 'auto',\n          bottom: 'auto',\n          marginRight: '-50%',\n          transform: 'translate(-50%, -50%)',\n          background: '#F8F8FB',\n          color: '#000000',\n          borderRadius: '4px',\n          width: '50%',\n          maxHeight: '90%',\n          border: 'none',\n        },\n        overlay: {\n          backgroundColor: 'rgb(41, 41, 56, 0.4)',\n        },\n      }}\n    >\n      {children}\n    </ReactModal>\n  );\n};\n\nexport default Modal;\n","/home/brl4528/MidasCorp/samasc-web/src/components/TextArea/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/TextArea/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Select/index.tsx",["301","302","303","304"],"import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport ReactSelect, {\n  OptionTypeBase,\n  Props as SelectProps,\n} from 'react-select';\n\nimport { IconBaseProps } from 'react-icons';\n\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\ninterface Props extends SelectProps<OptionTypeBase> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Select: React.FC<Props> = ({ name, icon: Icon, ...rest }) => {\n  const selectRef = useRef<any>(null);\n\n  const [isFocused, setFocused] = useState(false);\n  const [isFielld, setIsFilled] = useState(false);\n\n  const { fieldName, defaultValue, registerField } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      getValue: (ref: any) => {\n        if (rest.isMulti) {\n          if (!ref.state.value) {\n            return [];\n          }\n          return ref.state.value.map((option: OptionTypeBase) => option.value);\n        }\n        if (!ref.state.value) {\n          return '';\n        }\n        return ref.state.value.value;\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  const customStyles = {\n    option: (provided: any, state: any) => ({\n      ...provided,\n      // positon: 'absolute',\n      // flexDirection: 'column',\n      background: state.isSelected ? '#1c9cd9' : '#fff',\n\n      color: '#333',\n      ':hover': {\n        backgroundColor: '#b6d4f5',\n      },\n    }),\n    control: () => ({\n      display: 'flex',\n      alignItems: 'center',\n      width: 500,\n\n      // Width: ,\n    }),\n    singleValue: () => ({\n      color: '#333',\n    }),\n  };\n\n  const handleSelectFocus = useCallback(() => {\n    setFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setFocused(false);\n\n    setIsFilled(!!selectRef.current);\n  }, []);\n\n  return (\n    <>\n      <Container isFielld={isFielld} isFocused={isFocused}>\n        <div>{Icon && <Icon size={20} />}</div>\n        <ReactSelect\n          styles={customStyles}\n          onFocus={handleSelectFocus}\n          onBlur={handleInputBlur}\n          defaultValue={defaultValue}\n          ref={selectRef}\n          classNamePrefix=\"react-select\"\n          {...rest}\n        />\n      </Container>\n    </>\n  );\n};\n\nexport default Select;\n","/home/brl4528/MidasCorp/samasc-web/src/components/Select/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/GoalsSubgoals/index.tsx",["305"],"/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport Button from '../../../components/Button';\nimport ModalAddGoals from '../../../components/Modal/ModalAddGoals';\nimport ModalAddSubGoals from '../../../components/Modal/ModalAddSubGoals';\n\nimport api from '../../../services/api';\n\nimport {\n  Container,\n  CardeHeader,\n  CardButton,\n  TableContainer,\n  ContainerInfo,\n  TableInfo,\n  CadView,\n  ViewSubGoals,\n} from './styles';\n\ninterface IGoals {\n  id: string;\n  name: string;\n  status: string;\n  weight: string;\n  observations: string;\n}\n\ninterface IDataGoals {\n  id: string;\n  name: string;\n  status: string;\n  weight: string;\n  observations: string;\n  sub_goals_of_goals: [\n    {\n      sub_goals: {\n        id: string;\n        name: string;\n        status: string;\n        observations: string;\n      };\n    },\n  ];\n}\n\n// interface ISubgoalsItem {\n//   sub_goals: {\n//     name: string;\n//     status: string;\n//     observations: string;\n//   };\n// }\n\nconst SelectorFolders: React.FC = () => {\n  const [modalOpenGoals, setModalGoalsOpen] = useState(false);\n  const [modalOpenSubGoals, setModalOpen] = useState(false);\n\n  const [dataGoals, setDataGoals] = useState<IDataGoals[]>([]);\n  const [dataTemp, setDataTemp] = useState({});\n\n  const [itemSelected, setItemSelected] = useState('');\n\n  const toggleModalGoals = useCallback(() => {\n    setModalGoalsOpen(!modalOpenGoals);\n  }, [modalOpenGoals]);\n\n  const toggleModalSubgoals = useCallback(() => {\n    setModalOpen(!modalOpenSubGoals);\n  }, [modalOpenSubGoals]);\n\n  useEffect(() => {\n    api.get('/goals').then(response => {\n      setDataGoals(response.data);\n    });\n  }, [dataTemp]);\n\n  const handleGoals = useCallback((goal: Omit<IGoals, 'id'>) => {\n    try {\n      const temp = goal;\n      setDataTemp(temp);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  const hanleSelectedItem = useCallback(\n    id => {\n      if (itemSelected === id) {\n        setItemSelected('');\n        return;\n      }\n      setItemSelected(id);\n    },\n    [itemSelected],\n  );\n\n  return (\n    <>\n      <ModalAddGoals\n        isOpen={modalOpenGoals}\n        setIsOpen={toggleModalGoals}\n        handleGoals={handleGoals}\n      />\n      <ModalAddSubGoals\n        isOpen={modalOpenSubGoals}\n        setIsOpen={toggleModalSubgoals}\n      />\n\n      <Container>\n        <CardeHeader>\n          <div>\n            <h2>Metas e Submetas</h2>\n            <strong>Cadastre novas metas ou edite metas existentes</strong>\n          </div>\n\n          <CardButton>\n            <div>\n              <Button onClick={toggleModalGoals} type=\"button\">\n                Criar nova meta\n              </Button>\n            </div>\n            <div>\n              <Button onClick={toggleModalSubgoals} groud type=\"button\">\n                Criar Submeta\n              </Button>\n            </div>\n          </CardButton>\n        </CardeHeader>\n\n        {/* <TableContainer>\n          <table>\n            <thead>\n              <tr>\n                <th />\n                <th>Peso</th>\n                <th>Situação</th>\n                <th />\n                <th>Composição</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {dataSubGoals.map(subgoal => (\n                <tr key={subgoal.id}>\n                  <td>\n                    <h3>{subgoal.name}</h3>\n                  </td>\n                  <td>{subgoal.weight}</td>\n                  <td>{subgoal.status}</td>\n                  <td>...</td>\n                  <td>abrir</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </TableContainer> */}\n        <ContainerInfo>\n          <TableContainer>\n            {dataGoals.map(subgoal => (\n              <button\n                type=\"button\"\n                key={subgoal.id}\n                onClick={() => hanleSelectedItem(subgoal.id)}\n              >\n                <div>\n                  <strong>{subgoal.name}</strong>\n                  <p>{subgoal.observations}</p>\n                </div>\n\n                <FiChevronRight size={20} />\n              </button>\n            ))}\n          </TableContainer>\n\n          <TableInfo>\n            {dataGoals.map(subgoal => (\n              <CadView\n                key={subgoal.id}\n                item={subgoal.id}\n                selected={itemSelected}\n              >\n                <span key={subgoal.id}>\n                  <div>\n                    <strong>{subgoal.name}</strong>\n                    <p>{subgoal.observations}</p>\n                  </div>\n                </span>\n                <ViewSubGoals>\n                  <h3>Composição</h3>\n                  {subgoal.sub_goals_of_goals.map(sub => (\n                    <span key={sub.sub_goals.id}>\n                      <div>\n                        <strong>{sub.sub_goals.name}</strong>\n                        <p>{sub.sub_goals.observations}</p>\n                      </div>\n                    </span>\n                  ))}\n                </ViewSubGoals>\n              </CadView>\n            ))}\n          </TableInfo>\n        </ContainerInfo>\n      </Container>\n    </>\n  );\n};\n\nexport default SelectorFolders;\n","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/GoalsSubgoals/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Sector/index.tsx",["306"],"import React, { useCallback, useState, useRef, useEffect } from 'react';\n\nimport { FullScreen, useFullScreenHandle } from 'react-full-screen';\n\nimport { useReactToPrint } from 'react-to-print';\n\nimport { FiEdit, FiPrinter, FiMaximize } from 'react-icons/fi';\n\nimport GraphicSpeedometer from '../../../components/GraphicModels/GraphicSpeedometer';\n\nimport Button from '../../../components/Button';\nimport ModalAddGoals from '../../../components/Modal/ModalAddSector';\n\nimport {\n  Container,\n  CardeHeader,\n  CardButton,\n  CardGraphic,\n  GraphicTitle,\n  GraphicSpeed,\n  CardBodyGoals,\n  CardGraphicText,\n} from './styles';\nimport api from '../../../services/api';\n\ninterface ISector {\n  id: string;\n  name: string;\n  leader: string;\n  observations: string;\n}\n\nconst SelectorFolders: React.FC = () => {\n  const handle = useFullScreenHandle();\n\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const [modalOpen, setModalOpen] = useState(false);\n  const [dataSector, setDataSector] = useState<ISector>();\n  const [dataUpdateSector, setDataUpdateSector] = useState<ISector[]>([]);\n\n  const toggleModal = useCallback(() => {\n    setModalOpen(!modalOpen);\n  }, [modalOpen]);\n\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  useEffect(() => {\n    api.get('/sectors').then(response => {\n      setDataUpdateSector(response.data);\n    });\n  }, [dataSector]);\n\n  const handleSector = useCallback((sector: Omit<ISector, ''>) => {\n    try {\n      const sectorData = sector;\n      setDataSector(sectorData);\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  return (\n    <>\n      <ModalAddGoals\n        isOpen={modalOpen}\n        setIsOpen={toggleModal}\n        handleSector={handleSector}\n      />\n      <Container>\n        <CardeHeader>\n          <div>\n            <h2>Setores</h2>\n            <strong>Análise os setores da cooperativa.</strong>\n          </div>\n\n          <CardButton>\n            <div>\n              <Button onClick={toggleModal} type=\"button\">\n                Adicionar novo setor\n              </Button>\n            </div>\n          </CardButton>\n        </CardeHeader>\n\n        {dataUpdateSector.map(sector => (\n          <FullScreen key={sector.id} handle={handle}>\n            <CardGraphic className=\"fullscreen-item\" ref={componentRef}>\n              <CardGraphicText>\n                <GraphicTitle>{sector.name}</GraphicTitle>\n                <span>\n                  <FiEdit />\n                  <FiPrinter onClick={handlePrint} />\n                  <FiMaximize onClick={handle.enter} />\n                </span>\n              </CardGraphicText>\n              <CardBodyGoals>\n                <GraphicSpeed>\n                  <CardGraphicText>\n                    <GraphicTitle>Meta 01</GraphicTitle>\n                  </CardGraphicText>\n                  <GraphicSpeedometer dataValue={150} />\n                </GraphicSpeed>\n                <GraphicSpeed>\n                  <CardGraphicText>\n                    <GraphicTitle>Meta 02</GraphicTitle>\n                  </CardGraphicText>\n                  <GraphicSpeedometer dataValue={250} />\n                </GraphicSpeed>\n                <GraphicSpeed>\n                  <CardGraphicText>\n                    <GraphicTitle>Meta 03</GraphicTitle>\n                  </CardGraphicText>\n                  <GraphicSpeedometer dataValue={450} />\n                </GraphicSpeed>\n              </CardBodyGoals>\n            </CardGraphic>\n          </FullScreen>\n        ))}\n      </Container>\n    </>\n  );\n};\n\nexport default SelectorFolders;\n","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/Sector/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/CardGraphic/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/CardGraphic/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicSpeedometer/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/DataTable/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/GraphicModels/GraphicChartPie/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/AnalyticModule/index.tsx",["307"],"/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport Button from '../../../components/Button';\nimport ModalAddGoals from '../../../components/Modal/ModalAddAnalyticModule';\nimport api from '../../../services/api';\n\nimport {\n  Container,\n  CardeHeader,\n  CardButton,\n  TableContainerList,\n} from './styles';\n\ninterface IAnalyticModule {\n  id: string;\n  name: string;\n  responsible: string;\n  condition: string;\n  observations: string;\n}\n\nconst SelectorFolders: React.FC = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [dataAnalytic, setDataAnalytic] = useState<IAnalyticModule>();\n\n  const [dataAnalyticModule, setDataAnalyticModule] = useState<\n    IAnalyticModule[]\n  >([]);\n\n  const toggleModal = useCallback(() => {\n    setModalOpen(!modalOpen);\n  }, [modalOpen]);\n\n  useEffect(() => {\n    api.get('/analysis-module').then(response => {\n      setDataAnalyticModule(response.data);\n    });\n  }, [dataAnalytic]);\n\n  const handleAnalytic = useCallback(\n    (analytic: Omit<IAnalyticModule, 'status'>) => {\n      try {\n        const temp = analytic;\n        setDataAnalytic(temp);\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [],\n  );\n\n  return (\n    <>\n      <ModalAddGoals\n        isOpen={modalOpen}\n        setIsOpen={toggleModal}\n        handleAnalytic={handleAnalytic}\n      />\n      <Container>\n        <CardeHeader>\n          <div>\n            <h2>Módulo de Análise</h2>\n            <strong>Verifique as formas de inserção de dados manuais.</strong>\n          </div>\n\n          <CardButton>\n            <div>\n              <Button onClick={toggleModal} type=\"button\">\n                Criar novo módulo de análise\n              </Button>\n            </div>\n          </CardButton>\n        </CardeHeader>\n\n        {/* <TableContainer>\n          <table>\n            <thead>\n              <tr>\n                <th />\n                <th>Peso</th>\n                <th>Resultado previsto</th>\n                <th>Prazo</th>\n                <th>Variação</th>\n                <th />\n              </tr>\n            </thead>\n\n            <tbody>\n              {dataAnalyticModule.map(analyticModule => (\n                <tr key={analyticModule.id}>\n                  <td>\n                    <h3>{analyticModule.name}</h3>\n                  </td>\n                  <td>10%</td>\n                  <td>Submetas</td>\n                  <td>Dezembro 2021</td>\n                  <td>On/Off</td>\n                  <td>...</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </TableContainer> */}\n\n        <TableContainerList>\n          {dataAnalyticModule.map(analyticModule => (\n            <span key={analyticModule.id}>\n              <div>\n                <strong>{analyticModule.name}</strong>\n                <p>{analyticModule.observations}</p>\n              </div>\n\n              <FiChevronRight size={20} />\n            </span>\n          ))}\n        </TableContainerList>\n        {/* <TableInfo>\n            {dataGoals.map(subgoal => (\n              <CadView\n                key={subgoal.id}\n                item={subgoal.id}\n                selected={itemSelected}\n              >\n                <span key={subgoal.id}>\n                  <div>\n                    <strong>{subgoal.name}</strong>\n                    <p>{subgoal.observations}</p>\n                  </div>\n                </span>\n                <ViewSubGoals>\n                  <h3>Composição</h3>\n                  {subgoal.sub_goals_of_goals.map(sub => (\n                    <span key={sub.sub_goals.id}>\n                      <div>\n                        <strong>{sub.sub_goals.name}</strong>\n                        <p>{sub.sub_goals.observations}</p>\n                      </div>\n                    </span>\n                  ))}\n                </ViewSubGoals>\n              </CadView>\n            ))}\n          </TableInfo> */}\n      </Container>\n    </>\n  );\n};\n\nexport default SelectorFolders;\n","/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/AnalyticModule/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddAnalyticModule/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddAnalyticModule/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddGoals/index.tsx",["308","309","310","311"],"/* eslint-disable no-unused-vars */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { FormHandles } from '@unform/core';\n\nimport * as Yup from 'yup';\nimport { FiLink2 } from 'react-icons/fi';\nimport { useToast } from '../../../hooks/toast';\n\nimport {\n  Form,\n  ContainerSub,\n  CardSub,\n  ContainerAnalytic,\n  CardAnalytic,\n} from './styles';\n\n// import { FormContainer } from './styles';\nimport Input from '../../Input';\nimport TextArea from '../../TextArea';\nimport Button from '../../Button';\nimport Select from '../../Select';\n\nimport Modal from '../index';\nimport api from '../../../services/api';\n\ninterface IGoals {\n  id: string;\n  name: string;\n  status: string;\n  weight: string;\n  observations: string;\n}\n\ninterface IModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n  handleGoals: (goal: Omit<IGoals, 'id'>) => void;\n}\n\ninterface AddGoalsModal {\n  name: string;\n  weight: string;\n  source: string;\n  observations: string;\n}\n\ninterface DataSubGoals {\n  id: string;\n  name: string;\n  status: string;\n  weight: string;\n}\n\ninterface IAnalyticModule {\n  id: string;\n  name: string;\n  responsible: string;\n  condition: string;\n  observations: string;\n}\n\nconst ModalAddFood: React.FC<IModalProps> = ({\n  isOpen,\n  setIsOpen,\n  handleGoals,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToast();\n\n  const [openSubGoals, setOpenSubGoals] = useState(false);\n  const [openAnalyticModule, setAnlalyticModule] = useState(false);\n  const [selectedSubGoalsItems, setSelectedSubGoalsItems] = useState<string[]>(\n    [],\n  );\n  const [dataSubGoals, setDataSubGoals] = useState<DataSubGoals[]>([]);\n  const [selectedAnalyticItems, setSelectedAnalyticItems] = useState<string[]>(\n    [],\n  );\n  const [analyticModule, setAnalyticModule] = useState<IAnalyticModule[]>([]);\n\n  useEffect(() => {\n    try {\n      api.get('/sub-goals').then(response => {\n        setDataSubGoals(response.data);\n      });\n\n      api.get('/analysis-module').then(response => {\n        setAnalyticModule(response.data);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }, []);\n\n  const hanleOpenSubGoals = useCallback(() => {\n    setOpenSubGoals(!openSubGoals);\n    setAnlalyticModule(false);\n  }, [openSubGoals]);\n\n  const handleOpenAnalyticModule = useCallback(() => {\n    setAnlalyticModule(!openAnalyticModule);\n    setOpenSubGoals(false);\n  }, [openAnalyticModule]);\n\n  const handleSubmit = useCallback(\n    async (data: AddGoalsModal) => {\n      try {\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome da meta obrigatório'),\n          weight: Yup.number().required('Peso obrigatório'),\n          source: Yup.string(),\n          observations: Yup.string(),\n        });\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        const status = 'ativo';\n\n        const { name, observations, source, weight } = data;\n\n        const formData = {\n          name,\n          observations,\n          source,\n          weight,\n          status,\n        };\n        const response = await api.post('/goals', formData);\n\n        handleGoals(formData);\n\n        if (selectedAnalyticItems.length > 0) {\n          console.log('item selecionado', selectedAnalyticItems[0]);\n          await api.put(\n            `/analysis-module?analyze_module_id=${selectedAnalyticItems[0]}`,\n            {\n              url: `http://localhost:3000/painel-analytic-module/?${response.data.id}`,\n            },\n          );\n        }\n\n        if (selectedSubGoalsItems.length > 0) {\n          console.log('entrou');\n          await api.post('/sub-goals-of-goals/create-all', {\n            sub_goals_ids: selectedSubGoalsItems,\n            goal_id: response.data.id,\n          });\n        }\n\n        setIsOpen();\n\n        addToast({\n          type: 'success',\n          title: 'Meta do setor',\n          description: 'Criada sucesso com sucesso',\n        });\n      } catch (err) {\n        console.log(err);\n        setIsOpen();\n        addToast({\n          type: 'error',\n          title: 'Erro na atualização',\n          description: 'Ocorreu um erro ao criar nova meta.',\n        });\n      }\n    },\n    [\n      addToast,\n      setIsOpen,\n      handleGoals,\n      selectedSubGoalsItems,\n      selectedAnalyticItems,\n    ],\n  );\n\n  const handleSelectSubGoalsItem = useCallback(\n    (id: string) => {\n      const alreadySelected = selectedSubGoalsItems.findIndex(\n        (item: string) => item === id,\n      );\n\n      if (alreadySelected >= 0) {\n        const filteredItems = selectedSubGoalsItems.filter(\n          (item: string) => item !== id,\n        );\n\n        setSelectedSubGoalsItems(filteredItems);\n      } else {\n        setSelectedSubGoalsItems([...selectedSubGoalsItems, id]);\n      }\n    },\n    [selectedSubGoalsItems],\n  );\n\n  const handleSelectItem = useCallback(\n    (id: string) => {\n      const alreadySelected = selectedAnalyticItems.findIndex(\n        (item: string) => item === id,\n      );\n\n      if (alreadySelected >= 0) {\n        const filteredItems = selectedAnalyticItems.filter(\n          (item: string) => item !== id,\n        );\n\n        setSelectedAnalyticItems(filteredItems);\n      } else {\n        setSelectedAnalyticItems([id]);\n      }\n    },\n    [selectedAnalyticItems],\n  );\n\n  const options = [\n    { value: 'sage', label: 'Sistema Sage' },\n    { value: 's2', label: 'Sistema S2' },\n    { value: 'Senior', label: 'Sistema Senior' },\n    { value: 'Módulo de análise', label: 'Módulo de análise' },\n  ];\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      <Form\n        ref={formRef}\n        openSub={openSubGoals}\n        openAnalytic={openAnalyticModule}\n        onSubmit={handleSubmit}\n      >\n        <h2>Nova meta</h2>\n        <header>\n          <Input name=\"name\" placeholder=\"Nome da meta\" />\n\n          <Input type=\"number\" name=\"weight\" placeholder=\"Peso da meta\" />\n        </header>\n\n        <Input name=\"source\" placeholder=\"Meta prevista\" />\n        <Select name=\"type\" options={options} />\n\n        <Input type=\"date\" name=\"date\" placeholder=\"Prazo\" />\n\n        <TextArea name=\"observations\" placeholder=\"Descrição\" />\n\n        <nav>\n          <span>\n            <button\n              name=\"analyticModule\"\n              onClick={handleOpenAnalyticModule}\n              type=\"button\"\n            >\n              Atribuir módulo de análise\n              <FiLink2 size={20} />\n            </button>\n\n            <button name=\"subGoals\" onClick={hanleOpenSubGoals} type=\"button\">\n              Atribuir submeta\n              <FiLink2 size={20} />\n            </button>\n          </span>\n\n          <ContainerSub>\n            {dataSubGoals.map(sub => (\n              <CardSub\n                onClick={() => handleSelectSubGoalsItem(sub.id)}\n                key={sub.id}\n                openSub={openSubGoals}\n                className={\n                  selectedSubGoalsItems.includes(sub.id) ? 'selected' : ''\n                }\n              >\n                <h4>{sub.name}</h4>\n              </CardSub>\n            ))}\n          </ContainerSub>\n\n          <ContainerAnalytic>\n            {analyticModule.map(analytic => (\n              <CardAnalytic\n                onClick={() => handleSelectItem(analytic.id)}\n                key={analytic.id}\n                openAnalytic={openAnalyticModule}\n                className={\n                  selectedAnalyticItems.includes(analytic.id) ? 'selected' : ''\n                }\n              >\n                <h4>{analytic.name}</h4>\n              </CardAnalytic>\n            ))}\n          </ContainerAnalytic>\n\n          <Button type=\"submit\" data-testid=\"add-food-button\">\n            Salvar\n          </Button>\n        </nav>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ModalAddFood;\n","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddGoals/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSubGoals/index.tsx",["312"],"import React, { useCallback, useRef } from 'react';\n\nimport { FormHandles } from '@unform/core';\n\nimport * as Yup from 'yup';\n\nimport { useToast } from '../../../hooks/toast';\n\nimport { Form } from './styles';\n\nimport Input from '../../Input';\nimport TextArea from '../../TextArea';\nimport Button from '../../Button';\n\nimport Modal from '../index';\nimport api from '../../../services/api';\n\ninterface IModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n}\n\ninterface AddSubGoalsModal {\n  name: string;\n  weight: string;\n  observations: string;\n}\n\nconst ModalAddFood: React.FC<IModalProps> = ({ isOpen, setIsOpen }) => {\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToast();\n\n  const handleSubmit = useCallback(\n    async (data: AddSubGoalsModal) => {\n      try {\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome da meta obrigatório'),\n          weight: Yup.number().required('Peso obrigatório'),\n          observations: Yup.string(),\n        });\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        const status = 'ativo';\n\n        const { name, observations, weight } = data;\n\n        const formData = {\n          name,\n          observations,\n          weight,\n          status,\n        };\n\n        await api.post('/sub-goals', formData);\n        setIsOpen();\n\n        addToast({\n          type: 'success',\n          title: 'Submetas',\n          description: 'Criado sucesso com sucesso',\n        });\n      } catch (err) {\n        console.log(err);\n        setIsOpen();\n        addToast({\n          type: 'error',\n          title: 'Erro na criação',\n          description: 'Ocorreu um erro ao criar nova meta.',\n        });\n      }\n    },\n    [addToast, setIsOpen],\n  );\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      <Form ref={formRef} onSubmit={handleSubmit}>\n        <h2>Nova Submeta</h2>\n\n        <Input name=\"name\" placeholder=\"Nome da meta\" />\n\n        <Input type=\"number\" name=\"weight\" placeholder=\"Peso da meta\" />\n\n        <TextArea name=\"observations\" placeholder=\"Descrição\" />\n\n        <Button type=\"submit\" data-testid=\"add-food-button\">\n          Salvar\n        </Button>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ModalAddFood;\n","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSubGoals/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSector/index.tsx",["313","314"],"/* eslint-disable no-unused-vars */\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { FormHandles } from '@unform/core';\n\nimport { FiX, FiLink2 } from 'react-icons/fi';\n\nimport * as Yup from 'yup';\n\nimport { useToast } from '../../../hooks/toast';\n\nimport { Form, ContainerSub, CardSub } from './styles';\n\nimport Input from '../../Input';\nimport TextArea from '../../TextArea';\nimport Button from '../../Button';\n\nimport Modal from '../index';\nimport api from '../../../services/api';\n\n// interface AddSectorModal {\n//   name: string;\n//   leader: string;\n//   observations: string;\n// }\n\ninterface ISector {\n  id: string;\n  name: string;\n  leader: string;\n  observations: string;\n}\n\ninterface IGoals {\n  id: string;\n  name: string;\n  status: string;\n  weight: string;\n  observations: string;\n}\n\ninterface IModalProps {\n  isOpen: boolean;\n  setIsOpen: () => void;\n  handleSector: (sector: Omit<ISector, ''>) => void;\n}\n\nconst ModalAddSector: React.FC<IModalProps> = ({\n  isOpen,\n  setIsOpen,\n  handleSector,\n}) => {\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToast();\n\n  const [selectedGoalsItems, setSelectedGoalsItems] = useState<string[]>([]);\n\n  const [openGoals, setOpenGoals] = useState(false);\n  const [dataGoals, setDataGoals] = useState<IGoals[]>([]);\n\n  useEffect(() => {\n    api.get('/goals').then(response => {\n      setDataGoals(response.data);\n    });\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (data: ISector) => {\n      try {\n        formRef.current?.setErrors({});\n\n        const schema = Yup.object().shape({\n          name: Yup.string().required('Nome do setoe é Obrigatório'),\n          leader: Yup.string().required('Lider é obrigatório'),\n          observations: Yup.string(),\n        });\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        const { name, observations, leader } = data;\n\n        const formData = {\n          name,\n          // observations,\n          leader,\n        };\n\n        const response = await api.post('/sectors', formData);\n        handleSector(response.data);\n\n        if (selectedGoalsItems.length > 0) {\n          await api.post('/goals-of-sectors/create-all', {\n            goals_ids: selectedGoalsItems,\n            sector_id: response.data.id,\n          });\n        }\n\n        setIsOpen();\n\n        addToast({\n          type: 'success',\n          title: 'Setor',\n          description: 'Setor criado sucesso com sucesso',\n        });\n      } catch (err) {\n        console.log(err);\n        setIsOpen();\n        addToast({\n          type: 'error',\n          title: 'Erro na criação',\n          description: 'Ocorreu um erro ao criar novo setor.',\n        });\n      }\n    },\n    [addToast, setIsOpen, handleSector, selectedGoalsItems],\n  );\n\n  const handleSelectGoalsItem = useCallback(\n    (id: string) => {\n      const alreadySelected = selectedGoalsItems.findIndex(\n        (item: string) => item === id,\n      );\n\n      if (alreadySelected >= 0) {\n        const filteredItems = selectedGoalsItems.filter(\n          (item: string) => item !== id,\n        );\n\n        setSelectedGoalsItems(filteredItems);\n      } else {\n        setSelectedGoalsItems([...selectedGoalsItems, id]);\n      }\n    },\n    [selectedGoalsItems],\n  );\n\n  const hanleOpenGoals = useCallback(() => {\n    setOpenGoals(!openGoals);\n  }, [openGoals]);\n\n  return (\n    <Modal isOpen={isOpen} setIsOpen={setIsOpen}>\n      <Form ref={formRef} openGoals={openGoals} onSubmit={handleSubmit}>\n        <span>\n          <h2>Novo Setor</h2>\n          <FiX size={20} onClick={() => setIsOpen()} />\n        </span>\n\n        <Input name=\"name\" placeholder=\"Nome do setor\" />\n\n        <Input type=\"text\" name=\"leader\" placeholder=\"Lider do setor\" />\n\n        <TextArea name=\"observations\" placeholder=\"Descrição\" />\n\n        <nav>\n          <span>\n            <button name=\"subGoals\" onClick={hanleOpenGoals} type=\"button\">\n              Atribuir metas\n              <FiLink2 size={20} />\n            </button>\n          </span>\n\n          <ContainerSub>\n            {dataGoals.map(sub => (\n              <CardSub\n                onClick={() => handleSelectGoalsItem(sub.id)}\n                key={sub.id}\n                openGoals={openGoals}\n                className={\n                  selectedGoalsItems.includes(sub.id) ? 'selected' : ''\n                }\n              >\n                <h4>{sub.name}</h4>\n              </CardSub>\n            ))}\n          </ContainerSub>\n\n          <Button type=\"submit\" data-testid=\"add-food-button\">\n            Salvar\n          </Button>\n        </nav>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ModalAddSector;\n","/home/brl4528/MidasCorp/samasc-web/src/components/Modal/ModalAddSector/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/PainelAnalyticModule/index.tsx",["315","316","317","318"],"/home/brl4528/MidasCorp/samasc-web/src/pages/Dashboard-adm/PainelAnalyticModule/styles.ts",[],"/home/brl4528/MidasCorp/samasc-web/src/components/InputRadio/index.tsx",[],"/home/brl4528/MidasCorp/samasc-web/src/components/InputRadio/styles.ts",[],{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","replacedBy":"326"},{"ruleId":"327","replacedBy":"328"},{"ruleId":"329","severity":1,"message":"330","line":47,"column":9,"nodeType":"331","messageId":"332","endLine":47,"endColumn":20},{"ruleId":"319","replacedBy":"333"},{"ruleId":"321","replacedBy":"334"},{"ruleId":"323","replacedBy":"335"},{"ruleId":"325","replacedBy":"336"},{"ruleId":"327","replacedBy":"337"},{"ruleId":"329","severity":1,"message":"330","line":55,"column":25,"nodeType":"331","messageId":"332","endLine":55,"endColumn":36},{"ruleId":"319","replacedBy":"338"},{"ruleId":"321","replacedBy":"339"},{"ruleId":"323","replacedBy":"340"},{"ruleId":"325","replacedBy":"341"},{"ruleId":"327","replacedBy":"342"},{"ruleId":"343","severity":1,"message":"344","line":6,"column":13,"nodeType":"345","messageId":"346","endLine":6,"endColumn":16,"suggestions":"347"},{"ruleId":"343","severity":1,"message":"344","line":19,"column":28,"nodeType":"345","messageId":"346","endLine":19,"endColumn":31,"suggestions":"348"},{"ruleId":"343","severity":1,"message":"344","line":30,"column":23,"nodeType":"345","messageId":"346","endLine":30,"endColumn":26,"suggestions":"349"},{"ruleId":"343","severity":1,"message":"344","line":46,"column":24,"nodeType":"345","messageId":"346","endLine":46,"endColumn":27,"suggestions":"350"},{"ruleId":"343","severity":1,"message":"344","line":46,"column":36,"nodeType":"345","messageId":"346","endLine":46,"endColumn":39,"suggestions":"351"},{"ruleId":"329","severity":1,"message":"330","line":84,"column":7,"nodeType":"331","messageId":"332","endLine":84,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":61,"column":7,"nodeType":"331","messageId":"332","endLine":61,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":49,"column":9,"nodeType":"331","messageId":"332","endLine":49,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":92,"column":7,"nodeType":"331","messageId":"332","endLine":92,"endColumn":18},{"ruleId":"329","severity":1,"message":"330","line":137,"column":11,"nodeType":"331","messageId":"332","endLine":137,"endColumn":22},{"ruleId":"329","severity":1,"message":"330","line":147,"column":11,"nodeType":"331","messageId":"332","endLine":147,"endColumn":22},{"ruleId":"329","severity":1,"message":"330","line":162,"column":9,"nodeType":"331","messageId":"332","endLine":162,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":67,"column":9,"nodeType":"331","messageId":"332","endLine":67,"endColumn":20},{"ruleId":"352","severity":1,"message":"353","line":82,"column":23,"nodeType":"354","messageId":"355","endLine":82,"endColumn":35},{"ruleId":"329","severity":1,"message":"330","line":108,"column":9,"nodeType":"331","messageId":"332","endLine":108,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":65,"column":5,"nodeType":"331","messageId":"332","endLine":65,"endColumn":16},{"ruleId":"329","severity":1,"message":"330","line":72,"column":9,"nodeType":"331","messageId":"332","endLine":72,"endColumn":20},{"ruleId":"329","severity":1,"message":"330","line":75,"column":7,"nodeType":"331","messageId":"332","endLine":75,"endColumn":18},{"ruleId":"356","severity":1,"message":"357","line":77,"column":6,"nodeType":"358","endLine":77,"endColumn":14,"suggestions":"359"},"lines-around-directive",["360"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["360"],[],[],[],[],["360"],[],[],[],[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["361","362"],["363","364"],["365","366"],["367","368"],["369","370"],"@typescript-eslint/no-unused-vars","'observations' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataGoalsAnalytic'. Either include it or remove the dependency array.","ArrayExpression",["371"],"padding-line-between-statements",{"messageId":"372","fix":"373","desc":"374"},{"messageId":"375","fix":"376","desc":"377"},{"messageId":"372","fix":"378","desc":"374"},{"messageId":"375","fix":"379","desc":"377"},{"messageId":"372","fix":"380","desc":"374"},{"messageId":"375","fix":"381","desc":"377"},{"messageId":"372","fix":"382","desc":"374"},{"messageId":"375","fix":"383","desc":"377"},{"messageId":"372","fix":"384","desc":"374"},{"messageId":"375","fix":"385","desc":"377"},{"desc":"386","fix":"387"},"suggestUnknown",{"range":"388","text":"389"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"388","text":"390"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"391","text":"389"},{"range":"391","text":"390"},{"range":"392","text":"389"},{"range":"392","text":"390"},{"range":"393","text":"389"},{"range":"393","text":"390"},{"range":"394","text":"389"},{"range":"394","text":"390"},"Update the dependencies array to be: [dataGoalsAnalytic, parsed]",{"range":"395","text":"396"},[128,131],"unknown","never",[502,505],[803,806],[1215,1218],[1227,1230],[1727,1735],"[dataGoalsAnalytic, parsed]"]